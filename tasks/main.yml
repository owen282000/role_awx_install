---
- name: Ensure required variables are set
  ansible.builtin.assert:
    that: "{{ item }} is defined"
    fail_msg: "{{ item }} should be defined, see README.md of role_bastion"
    success_msg: "All required variables are set."
  loop:
    - awx_admin_user
    - awx_admin_password 
    - bastion_install_dir
    - persistent_container_storage_dir
    - awx_namespace

- name: Set AWX Operator version if not defined
  block:
    - name: Fetch tags from AWX Operator repository
      ansible.builtin.uri:
        url: "https://api.github.com/repos/ansible/awx-operator/tags"
        return_content: yes
      register: awx_tags_response

    - name: Use the latest AWX Operator version
      set_fact:
        awx_operator_version: >-
          {{
            awx_tags_response.json | map(attribute='name') | map('split', '.') |
            map('map', 'int') | sort(reverse=True) | map('join', '.') | first
          }}
  when: awx_operator_version is not defined

- name: Create necessary directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
  loop:
    - "{{ bastion_install_dir }}/awx/kustomize/"
    - "{{ persistent_container_storage_dir }}/awx/postgres-15/data/userdata"
    - "{{ persistent_container_storage_dir }}/awx/projects"

- name: Set permissions for AWX postgres directory
  ansible.builtin.file:
    path: "{{ persistent_container_storage_dir }}/awx/postgres-15"
    mode: '0755'
    recurse: yes

- name: Set ownership for AWX postgres userdata directory
  ansible.builtin.file:
    path: "{{ persistent_container_storage_dir }}/awx/postgres-15/data/userdata"
    owner: 26
    group: 26
    mode: '0700'
    recurse: yes

- name: Set ownership for AWX project directory
  ansible.builtin.file:
    path: "{{ persistent_container_storage_dir }}/awx/projects"
    owner: 1000
    group: 0
    mode: '0755'
    recurse: yes

- name: Include Backup and Restore specific tasks
  include_tasks: backup_non_persistent.yml
  when: backup_data | default(false) | bool

- name: Include RedHat specific tasks
  include_tasks: redhat.yml
  when: ansible_os_family == "RedHat"

- name: Include Ubuntu specific tasks
  include_tasks: ubuntu.yml
  when: ansible_os_family == "Debian"

- name: Include K3S specific tasks
  include_tasks: k3s.yml
  when: k3s_install | default(false) | bool

- name: Remove AWX namespace and persistent volumes
  block:
    - name: Delete AWX namespace
      kubernetes.core.k8s:
        state: absent
        kind: Namespace
        name: "{{ awx_namespace }}"

    - name: Delete persistent volumes
      kubernetes.core.k8s:
        state: absent
        kind: PersistentVolume
        name: "{{ item }}"
      loop:
        - awx-postgres-15-volume
        - awx-projects-volume
      ignore_errors: true

    - name: Wait for AWX namespace deletion to complete
      ansible.builtin.shell: |
        while kubectl get namespace {{ awx_namespace }}; do
          echo "Waiting for namespace {{ awx_namespace }} to be deleted...";
          sleep 10;
        done
  when: delete_ns | default(false) | bool

- name: Clone AWX Operator repository
  ansible.builtin.git:
    repo: 'https://github.com/ansible/awx-operator.git'
    dest: '{{ bastion_install_dir }}/awx-operator'
    version: "tags/{{ awx_operator_version }}"
    force: yes

- name: Create Kubernetes namespace for AWX
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ awx_namespace }}"

- name: Apply Kustomization.yaml to deploy AWX Operator
  ansible.builtin.command:
    cmd: "kubectl apply -k {{ bastion_install_dir }}/awx-operator/config/default"
    chdir: "{{ bastion_install_dir }}/awx-operator"

- name: Wait for AWX Operator to be ready
  ansible.builtin.shell: |
    until kubectl get pods -n "{{ awx_namespace }}" -l control-plane=controller-manager -o jsonpath='{.items[*].status.phase}' | grep -q 'Running'; do
      echo "Waiting for AWX Operator to be ready...";
      sleep 30;
    done
  retries: 20
  delay: 30
  register: awx_operator_ready
  until: awx_operator_ready is success

- name: Copy kustomization files
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ bastion_install_dir }}/awx/kustomize/{{ item.dest }}"
  loop:
    - { src: "templates/kustomization/pvc.yaml.j2", dest: "pvc.yaml" }
    - { src: "templates/kustomization/pv.yaml.j2", dest: "pv.yaml" }
    - { src: "templates/kustomization/storageclass.yaml.j2", dest: "storageclass.yaml" }
    - { src: "templates/kustomization/awx.yaml.j2", dest: "awx.yaml" }
    - { src: "templates/kustomization/kustomization.yaml.j2", dest: "kustomization.yaml" }
    - { src: "templates/kustomization/namespace.yaml.j2", dest: "namespace.yaml" }

- name: Install AWX CRDs
  ansible.builtin.command:
    cmd: kubectl apply -f {{ item }}
  loop:
    - https://raw.githubusercontent.com/ansible/awx-operator/devel/config/crd/bases/awx.ansible.com_awxs.yaml
    - https://raw.githubusercontent.com/ansible/awx-operator/devel/config/crd/bases/awx.ansible.com_awxbackups.yaml
    - https://raw.githubusercontent.com/ansible/awx-operator/devel/config/crd/bases/awx.ansible.com_awxrestores.yaml
    - https://raw.githubusercontent.com/ansible/awx-operator/devel/config/crd/bases/awx.ansible.com_awxmeshingresses.yaml

- name: Deploy AWX
  ansible.builtin.command:
    cmd: "kubectl apply -k {{ bastion_install_dir }}/awx/kustomize"

- name: Wait for AWX instance to be ready
  ansible.builtin.shell: |
    until kubectl get pods -n "awx" -l app.kubernetes.io/name=awx-web -o jsonpath='{.items[*].status.phase}' | grep -q 'Running'; do
      echo "Waiting for AWX instance to be ready...";
      sleep 30;
    done
  register: awx_instance_ready
  retries: 75
  delay: 30
  until: awx_instance_ready is success

- name: Retrieve AWX admin password
  ansible.builtin.shell: |
    kubectl get secret awx-admin-password -n "{{ awx_namespace }}" -o jsonpath="{.data.password}" | base64 -d
  register: awx_admin_password_output
  changed_when: false

- name: Retrieve NodePort of AWX service
  ansible.builtin.shell: |
    kubectl get service awx-service -n "{{ awx_namespace }}" -o jsonpath="{.spec.ports[0].nodePort}"
  register: awx_service_port_output
  changed_when: false

- name: Set AWX admin password and service port facts
  ansible.builtin.set_fact:
    awx_admin_password: "{{ awx_admin_password_output.stdout }}"
    awx_service_port: "{{ awx_service_port_output.stdout }}"

- name: Include Restore specific tasks
  include_tasks: restore_non_persistent.yml
  when: restore_data | default(false) | bool

- name: Save AWX access details to a file
  ansible.builtin.copy:
    dest: "/tmp/awx_access_details.txt"
    content: |
      AWX admin password: {{ awx_admin_password }}
      AWX URL: http://{{ ansible_default_ipv4.address }}:{{ awx_service_port }}
    mode: '0644'

- name: Debug the content to be saved in the file
  debug:
    msg: |
      AWX admin password: {{ awx_admin_password }}
      AWX URL: http://{{ ansible_default_ipv4.address }}:{{ awx_service_port }}
      Credentials saved in /tmp/awx_access_details.txt 

- name: Cleanup temporary files and resources
  include_tasks: cleanup.yml
