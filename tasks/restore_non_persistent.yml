---
- name: Wait 30 seconds for migration pods to spin up
  ansible.builtin.wait_for:
    timeout: 30

- name: Get list of migration pods
  ansible.builtin.command: |
    kubectl get pods -n "{{ awx_namespace }}" --no-headers | grep migration | awk '{print $3}'
  register: migration_pods_status
  ignore_errors: true

- name: Check if any migration pod is still running
  ansible.builtin.set_fact:
    migration_in_progress: "{{ 'Running' in migration_pods_status.stdout_lines }}"
  ignore_errors: true

- name: Wait for all migration pods to complete
  ansible.builtin.shell: |
    while [[ $(kubectl get pods -n "{{ awx_namespace }}" --no-headers | grep migration | awk '{print $3}' | grep -v Completed) ]]; do
      echo "Waiting for all migration pods to complete...";
      sleep 30;
    done
  when: migration_in_progress | bool
  retries: 20
  delay: 30
  ignore_errors: true

- name: Get list of AWX pod postgres
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: "{{ awx_namespace }}"
    label_selectors:
      - "app.kubernetes.io/name=postgres-15"
  register: awx_pods2

- name: Collect pod postgres name
  ansible.builtin.set_fact:
    podname_postgres: "{{ item.metadata.name }}"
  loop: "{{ awx_pods2.resources }}"

- name: Create backup directory in the container
  kubernetes.core.k8s_exec:
    namespace: "{{ awx_namespace }}"
    pod: "{{ podname_postgres }}"
    command: "mkdir -p /tmp/awx_backup"

- name: Copy backup archive from the container to local machine
  ansible.builtin.command: >
    kubectl cp {{ bastion_install_dir }}full_backup.sql {{ awx_namespace }}/{{ podname_postgres }}:/tmp/awx_backup/full_backup.sql

- name: Restore backup
  kubernetes.core.k8s_exec:
    namespace: "{{ awx_namespace }}"
    pod: "{{ podname_postgres }}"
    command: "pg_restore --clean --if-exists -U {{ awx_db_user }} -d {{ awx_db_name }} /tmp/awx_backup/full_backup.sql"
...
